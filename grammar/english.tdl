;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of English
;;; created at:
;;;     Sat Aug 19 18:43:20 UTC 2017
;;; based on Matrix customization system version of:
;;;     Tue Jul  4 20:47:47 UTC 2017
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

png :+ [ PROGRESSIVE bool,
    PERFECTIVE bool,
    PER person,
    NUM number,
    GEND gender ].

noun :+ [ CASE case ].

head :+ [ AUX bool,
    PRD bool,
    FORM form ].

inflected :+ [ IRREGULAR-ENDS-WITH-E-PERSON-NUMBER-TENSE-FLAG luk,
    NUMBER-FLAG luk,
    PERSON-NUMBER-TENSE-FLAG luk ].

infl-satisfied :+ [ IRREGULAR-ENDS-WITH-E-PERSON-NUMBER-TENSE-FLAG na-or-+,
    NUMBER-FLAG na-or-+,
    PERSON-NUMBER-TENSE-FLAG na-or-+ ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; For the analysis of inverted yes-no questions, we add the feature INV.

verb :+ [ INV bool ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nominative
acc := case.  ; accusative

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
singular := number.
plural := number.

;;; Gender

gender := *top*.
animate := gender.
inanimate := gender.
masculine := animate.
feminine := animate.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

past := tense.
present := tense.
future := tense.

;;; Mood

subjunctive := mood.
indicative := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

obl-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT - ] > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

common-noun-lex := third-person-noun-lex.

pronoun-noun-lex := no-spr-noun-lex.

count-noun-lex := common-noun-lex & obl-spr-noun-lex.

mass-noun-lex := common-noun-lex & no-spr-noun-lex.

first-person-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

second-person-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

third-person-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

masculine-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND masculine ].

feminine-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND feminine ].

singular-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ].

plural-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

first-person-singular-pronoun-noun-lex := pronoun-noun-lex & first-person-noun-lex & singular-noun-lex.

second-person-singular-pronoun-noun-lex := pronoun-noun-lex & second-person-noun-lex & singular-noun-lex.

third-person-singular-pronoun-noun-lex := pronoun-noun-lex & third-person-noun-lex & singular-noun-lex.

third-person-singular-masculine-pronoun-noun-lex := masculine-noun-lex & third-person-singular-pronoun-noun-lex.

third-person-singular-feminine-pronoun-noun-lex := feminine-noun-lex & third-person-singular-pronoun-noun-lex.

inanimate-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND inanimate ].

third-person-singular-inanimate-pronoun-noun-lex := third-person-singular-pronoun-noun-lex & inanimate-noun-lex.

first-person-plural-pronoun-noun-lex := pronoun-noun-lex & first-person-noun-lex & plural-noun-lex.

second-person-plural-pronoun-noun-lex := pronoun-noun-lex & second-person-noun-lex & plural-noun-lex.

third-person-plural-pronoun-noun-lex := pronoun-noun-lex & third-person-noun-lex & plural-noun-lex.

third-person-singular-animate-pronoun-noun-lex := third-person-singular-pronoun-noun-lex & animate-noun-lex.

animate-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND animate ].

regular-noun-lex := noun-lex.

irregular-noun-lex := noun-lex.

regular-count-noun-lex := count-noun-lex & regular-noun-lex &
  [ INFLECTED.NUMBER-FLAG - ].

irregular-count-noun-lex := count-noun-lex & irregular-noun-lex.

irregular-count-singular-noun-lex := singular-noun-lex & irregular-count-noun-lex.

irregular-count-plural-noun-lex := plural-noun-lex & irregular-count-noun-lex.

regular-count-animate-noun-lex := animate-noun-lex & regular-count-noun-lex.

regular-common-inanimate-noun-lex := inanimate-noun-lex & regular-count-noun-lex.

regular-count-masculine-noun-lex := masculine-noun-lex & regular-count-noun-lex.

regular-count-feminine-noun-lex := feminine-noun-lex & irregular-count-noun-lex.

;;; Verbs

; All verbs start off as not inverted.

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD verb &
                          [ INV - ] ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

intrans-verb-lex := nom-intransitive-verb-lex.

trans-verb-lex := nom-acc-transitive-verb-lex.

regular-verb-lex := verb-lex &
  [ INFLECTED.PERSON-NUMBER-TENSE-FLAG - ].

irregular-verb-lex := verb-lex.

regular-intransitive-verb-lex := intrans-verb-lex & regular-verb-lex.

regular-transitive-verb-lex := trans-verb-lex & regular-verb-lex.

irregular-ends-with-e-verb-lex := verb-lex &
  [ INFLECTED.IRREGULAR-ENDS-WITH-E-PERSON-NUMBER-TENSE-FLAG - ].

irregular-ends-with-e-transitive-verb-lex := trans-verb-lex & irregular-ends-with-e-verb-lex.

irregular-ends-with-e-intransitive-verb-lex := intrans-verb-lex & irregular-ends-with-e-verb-lex.

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < unexpressed >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb ] ] > ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

subj-raise-aux-no-pred := subj-raise-aux & raise-sem-lex-item &
  [ ARG-ST < [ ],
             [ LOCAL.CAT.HEAD.AUX - ] > ].

future-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE future,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

;;; Copulas

cop-lex := basic-verb-lex-super & trans-first-arg-raising-lex-item-2 &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                              CAT [ VAL [ SPR < >,
                                                          COMPS < > ],
                                                    HEAD noun ] ] ] >,
                             COMPS < [ LOCAL.CAT [ HEAD.PRD +,
                                                   VAL [ SUBJ < >,
                                                         COMPS < > ] ] ] >,
                             SPR < >,
                             SPEC < > ],
                   CONT.HOOK.XARG #xarg ] ].

; Copula type taking adjectival complements.
; Need to define more for additional complement types.

adj-comp-copula-verb-lex := cop-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD adj ].

base-cop-lex := adj-comp-copula-verb-lex.

singular-cop-lex := base-cop-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ].

plural-cop-lex := base-cop-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

first-person-cop-lex := base-cop-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

second-person-cop-lex := base-cop-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

third-person-cop-lex := base-cop-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

present-cop-lex := base-cop-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE present ].

past-cop-lex := base-cop-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

present-first-person-singular-cop-lex := singular-cop-lex & first-person-cop-lex & present-cop-lex.

present-second-person-singular-cop-lex := singular-cop-lex & second-person-cop-lex & present-cop-lex.

present-third-person-singular-animate-cop-lex := singular-cop-lex & third-person-cop-lex & present-cop-lex & animate-cop-lex.

present-third-person-singular-non-inanimate-cop-lex := singular-cop-lex & third-person-cop-lex & present-cop-lex & inanimate-cop-lex.

present-plural-cop-lex := plural-cop-lex & present-cop-lex.

animate-cop-lex := base-cop-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND animate ].

inanimate-cop-lex := base-cop-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND inanimate ].

;;; Adjectives

adj-lex := basic-intersective-adjective-lex.

common-adj-lex := attr-adj-lex &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD -,
                       VAL.SUBJ < >,
                       HEAD.PRD + ] ].

predicative-only-adj-lex := pred-only-adj-lex &
  [ SYNSEM.LOCAL.CAT [ VAL.SUBJ < >,
                       HEAD.PRD + ] ].

prenominal-attributive-only-adj-lex := attr-only-adj-lex &
  [ SYNSEM.LOCAL.CAT.POSTHEAD - ].

postnominal-attributive-only-adj-lex := attr-only-adj-lex &
  [ SYNSEM.LOCAL.CAT.POSTHEAD + ].

; Basic attributive adjective definition

attr-adj-lex := adj-lex & intersective-mod-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
                                              VAL.SPR cons ] ] > ].

attr-only-adj-lex := attr-adj-lex &
  [ SYNSEM.LOCAL.CAT [ HEAD.PRD -,
                       VAL.SUBJ < > ] ].

pred-only-adj-lex := adj-lex & no-mod-lex.

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

definite-determiner-lex := determiner-lex & no-icons-lex-item.

indefinite-determiner-lex := determiner-lex & no-icons-lex-item.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Lexical rule types

number-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ NUMBER-FLAG +,
                IRREGULAR-ENDS-WITH-E-PERSON-NUMBER-TENSE-FLAG #irregular-ends-with-e-person-number-tense,
                PERSON-NUMBER-TENSE-FLAG #person-number-tense ],
    DTR regular-count-noun-lex &
        [ INFLECTED [ IRREGULAR-ENDS-WITH-E-PERSON-NUMBER-TENSE-FLAG #irregular-ends-with-e-person-number-tense,
                      PERSON-NUMBER-TENSE-FLAG #person-number-tense ] ] ].

singular-lex-rule := const-lex-rule & number-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM singular ].

plural-lex-rule := infl-lex-rule & number-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

person-number-tense-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ PERSON-NUMBER-TENSE-FLAG +,
                IRREGULAR-ENDS-WITH-E-PERSON-NUMBER-TENSE-FLAG #irregular-ends-with-e-person-number-tense,
                NUMBER-FLAG #number ],
    DTR regular-verb-lex &
        [ INFLECTED [ IRREGULAR-ENDS-WITH-E-PERSON-NUMBER-TENSE-FLAG #irregular-ends-with-e-person-number-tense,
                      NUMBER-FLAG #number ] ] ].

person-number-tense-present-lex-rule := person-number-tense-finite-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE present,
                                     MOOD indicative ] ].

person-number-tense-past-lex-rule := infl-lex-rule & person-number-tense-finite-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE past,
                                     MOOD indicative ] ].

person-number-tense-3rd-lex-rule := infl-lex-rule & person-number-tense-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

person-number-tense-non-3rd-lex-rule := const-lex-rule & person-number-tense-lex-rule-super.

person-number-tense-finite-lex-rule := person-number-tense-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM finite ].

person-number-tense-3rd-present-lex-rule := person-number-tense-3rd-lex-rule & person-number-tense-present-lex-rule.

person-number-tense-non-3rd-present-lex-rule := person-number-tense-non-3rd-lex-rule & person-number-tense-present-lex-rule.

irregular-ends-with-e-person-number-tense-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ IRREGULAR-ENDS-WITH-E-PERSON-NUMBER-TENSE-FLAG +,
                PERSON-NUMBER-TENSE-FLAG #person-number-tense,
                NUMBER-FLAG #number ],
    DTR irregular-ends-with-e-verb-lex &
        [ INFLECTED [ PERSON-NUMBER-TENSE-FLAG #person-number-tense,
                      NUMBER-FLAG #number ] ] ].

irregular-ends-with-e-present-lex-rule := irregular-ends-with-e-finite-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE present,
                                     MOOD indicative ] ].

irregular-ends-with-e-past-lex-rule := infl-lex-rule & irregular-ends-with-e-finite-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE past,
                                     MOOD indicative ] ].

irregular-ends-with-e-3rd-lex-rule := infl-lex-rule & irregular-ends-with-e-person-number-tense-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

irregular-ends-with-e-non-3rd-lex-rule := const-lex-rule & irregular-ends-with-e-person-number-tense-lex-rule-super.

irregular-ends-with-e-finite-lex-rule := irregular-ends-with-e-person-number-tense-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM finite ].

irregular-ends-with-e-3rd-present-lex-rule := irregular-ends-with-e-3rd-lex-rule & irregular-ends-with-e-present-lex-rule.

irregular-ends-with-e-non-3rd-present-lex-rule := irregular-ends-with-e-non-3rd-lex-rule & irregular-ends-with-e-present-lex-rule.

; Rule for inverted subject verb order in questions.
; The incompatible SUBJ values on SYNSEM and DTR are
; what keeps this one from spinning.

subj-v-inv-lrule := cat-change-only-lex-rule & same-hc-light-lex-rule & same-posthead-lex-rule & constant-lex-rule &
  [ SYNSEM [ LKEYS #lkeys,
             LOCAL.CAT [ VAL [ COMPS < #subj . #comps >,
                               SUBJ < >,
                               SPR #spr,
                               SPEC #spec ],
                         MC na,
                         HEAD verb &
                              [ INV +,
                                FORM #form ] ] ],
    DTR.SYNSEM [ LKEYS #lkeys,
                 LOCAL.CAT [ VAL [ SUBJ < #subj >,
                                   COMPS #comps,
                                   SPR #spr,
                                   SPEC #spec ],
                             HEAD verb &
                                  [ AUX +,
                                    FORM #form ] ] ] ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-comp-phrase := basic-head-1st-comp-phrase & head-initial.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

; This rule takes [MC na] inverted phrases and licensesthem as main clauses with question semantics.
; 

int-cl := interrogative-clause & head-only &
  [ SYNSEM.LOCAL.CAT [ HEAD.INV +,
                       VAL #val,
                       MC + ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ MC na,
                                VAL #val &
                                    [ SUBJ < >,
                                      COMPS < > ] ],
    C-CONT.HOOK.INDEX.SF ques ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

s1-top-coord-rule := basic-s-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
